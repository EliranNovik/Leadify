-- Update leads_lead table to add subcontractor_fee column and connect currency to accounting_currencies
-- This script adds the subcontractor_fee column and sets up proper foreign key relationships

-- First, ensure the accounting_currencies table exists (in case it doesn't)
CREATE TABLE IF NOT EXISTS public.accounting_currencies (
  id bigint generated by default as identity not null,
  name text null,
  iso_code text null,
  "order" numeric null,
  constraint accounting_currencies_pkey primary key (id)
) TABLESPACE pg_default;

-- Create index if it doesn't exist
CREATE INDEX IF NOT EXISTS idx_accounting_currencies_id ON public.accounting_currencies USING btree (id) TABLESPACE pg_default;

-- Add subcontractor_fee column to leads_lead table if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'leads_lead' 
        AND column_name = 'subcontractor_fee'
    ) THEN
        ALTER TABLE public.leads_lead 
        ADD COLUMN subcontractor_fee numeric DEFAULT 0;
        
        RAISE NOTICE 'Added subcontractor_fee column to leads_lead table';
    ELSE
        RAISE NOTICE 'subcontractor_fee column already exists in leads_lead table';
    END IF;
END $$;

-- Add potential_total column to leads_lead table if it doesn't exist
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'leads_lead' 
        AND column_name = 'potential_total'
    ) THEN
        ALTER TABLE public.leads_lead 
        ADD COLUMN potential_total text DEFAULT NULL;
        
        RAISE NOTICE 'Added potential_total column to leads_lead table';
    ELSE
        RAISE NOTICE 'potential_total column already exists in leads_lead table';
    END IF;
END $$;

-- Check if currency_id column exists and has proper foreign key
DO $$ 
BEGIN
    -- Check if currency_id column exists
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'leads_lead' 
        AND column_name = 'currency_id'
    ) THEN
        -- Add currency_id column
        ALTER TABLE public.leads_lead 
        ADD COLUMN currency_id bigint DEFAULT NULL;
        
        RAISE NOTICE 'Added currency_id column to leads_lead table';
    ELSE
        RAISE NOTICE 'currency_id column already exists in leads_lead table';
    END IF;
    
    -- Check if foreign key constraint exists
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints tc
        JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
        WHERE tc.table_name = 'leads_lead' 
        AND kcu.column_name = 'currency_id'
        AND tc.constraint_type = 'FOREIGN KEY'
    ) THEN
        -- Add foreign key constraint
        ALTER TABLE public.leads_lead 
        ADD CONSTRAINT fk_leads_lead_currency_id 
        FOREIGN KEY (currency_id) REFERENCES public.accounting_currencies(id);
        
        RAISE NOTICE 'Added foreign key constraint for currency_id in leads_lead table';
    ELSE
        RAISE NOTICE 'Foreign key constraint for currency_id already exists in leads_lead table';
    END IF;
END $$;

-- Insert some common currencies if the table is empty
INSERT INTO public.accounting_currencies (name, iso_code, "order") 
VALUES 
    ('Israeli Shekel', 'ILS', 1),
    ('US Dollar', 'USD', 2),
    ('Euro', 'EUR', 3),
    ('British Pound', 'GBP', 4),
    ('Canadian Dollar', 'CAD', 5),
    ('Australian Dollar', 'AUD', 6),
    ('Japanese Yen', 'JPY', 7),
    ('Swiss Franc', 'CHF', 8),
    ('Swedish Krona', 'SEK', 9),
    ('Norwegian Krone', 'NOK', 10),
    ('Danish Krone', 'DKK', 11),
    ('Polish Zloty', 'PLN', 12),
    ('Czech Koruna', 'CZK', 13),
    ('Hungarian Forint', 'HUF', 14),
    ('Romanian Leu', 'RON', 15),
    ('Bulgarian Lev', 'BGN', 16),
    ('Croatian Kuna', 'HRK', 17),
    ('Russian Ruble', 'RUB', 18),
    ('Ukrainian Hryvnia', 'UAH', 19),
    ('Turkish Lira', 'TRY', 20)
ON CONFLICT (id) DO NOTHING;

-- Create a view to help with currency lookups
CREATE OR REPLACE VIEW leads_lead_with_currency AS
SELECT 
    ll.*,
    ac.name as currency_name,
    ac.iso_code as currency_iso_code,
    ac."order" as currency_order
FROM public.leads_lead ll
LEFT JOIN public.accounting_currencies ac ON ll.currency_id = ac.id;

-- Add RLS policies for accounting_currencies table
ALTER TABLE public.accounting_currencies ENABLE ROW LEVEL SECURITY;

-- Create policy for accounting_currencies (allow all authenticated users to read)
DROP POLICY IF EXISTS "Anyone can view currencies" ON public.accounting_currencies;
CREATE POLICY "Anyone can view currencies" ON public.accounting_currencies
    FOR SELECT USING (true);

-- Create policy for leads_lead_with_currency view
DROP POLICY IF EXISTS "Anyone can view leads with currency" ON public.leads_lead_with_currency;
CREATE POLICY "Anyone can view leads with currency" ON public.leads_lead_with_currency
    FOR SELECT USING (true);

-- Add helpful comments
COMMENT ON COLUMN public.leads_lead.subcontractor_fee IS 'Fee paid to subcontractors for this lead';
COMMENT ON COLUMN public.leads_lead.potential_total IS 'Potential total value of the lead';
COMMENT ON COLUMN public.leads_lead.currency_id IS 'Foreign key reference to accounting_currencies table';

-- Display completion message
DO $$ 
BEGIN
    RAISE NOTICE 'Successfully updated leads_lead table with subcontractor_fee and currency_id columns';
    RAISE NOTICE 'Created accounting_currencies table with common currencies';
    RAISE NOTICE 'Set up foreign key relationship between leads_lead.currency_id and accounting_currencies.id';
    RAISE NOTICE 'Created leads_lead_with_currency view for easier currency lookups';
END $$;
