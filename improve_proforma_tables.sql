-- SQL script to improve proforma tables with proper foreign key connections
-- This script adds the missing foreign key relationship between proformainvoice and proformainvoicerow tables

-- First, let's check the current state of the tables
DO $$
BEGIN
    RAISE NOTICE 'Checking current state of proforma tables...';
    
    -- Check if proformainvoice table exists
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'proformainvoice') THEN
        RAISE NOTICE 'proformainvoice table exists';
    ELSE
        RAISE NOTICE 'proformainvoice table does not exist - creating it...';
        
        -- Create proformainvoice table
        CREATE TABLE public.proformainvoice (
            id bigint generated by default as identity not null,
            cdate date not null default current_date,
            did numeric null,
            total numeric null,
            total_base numeric null,
            cer numeric null,
            print_counter numeric null,
            sync_date date null,
            export_session date null,
            reconciled text null default 'f'::text,
            notes text null,
            sub_total numeric null,
            add_vat text null,
            vat_value numeric null default '0'::numeric,
            creator_id numeric null,
            currency_id numeric null,
            lead_id bigint null,
            cxd_by_id numeric null,
            cxd_date date null,
            client_id numeric null,
            ppr_id numeric null,
            bank_account_id numeric null,
            firm_id numeric null,
            constraint proformainvoice_pkey primary key (id),
            constraint fk_proformainvoice_lead_id foreign KEY (lead_id) references leads_lead (id) on delete set null
        );
        
        -- Create indexes
        CREATE INDEX IF NOT EXISTS idx_proformainvoice_cdate ON public.proformainvoice USING btree (cdate);
        CREATE INDEX IF NOT EXISTS idx_proformainvoice_lead_id ON public.proformainvoice USING btree (lead_id);
        
        RAISE NOTICE 'proformainvoice table created successfully';
    END IF;
    
    -- Check if proformainvoicerow table exists
    IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'proformainvoicerow') THEN
        RAISE NOTICE 'proformainvoicerow table exists';
    ELSE
        RAISE NOTICE 'proformainvoicerow table does not exist - creating it...';
        
        -- Create proformainvoicerow table
        CREATE TABLE public.proformainvoicerow (
            id bigint generated by default as identity not null,
            created_at timestamp with time zone not null default now(),
            description text null default ''::text,
            qty numeric null,
            rate numeric null,
            total numeric null,
            invoice_id bigint null,
            constraint proformainvoicerow_pkey primary key (id)
        );
        
        RAISE NOTICE 'proformainvoicerow table created successfully';
    END IF;
END $$;

-- Fix column type and add the missing foreign key relationship
-- The proformainvoicerow.invoice_id should reference proformainvoice.id
DO $$
BEGIN
    -- First, fix the column type if needed
    IF EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'proformainvoicerow' 
        AND column_name = 'invoice_id' 
        AND data_type = 'numeric'
    ) THEN
        -- Change invoice_id from numeric to bigint to match proformainvoice.id
        ALTER TABLE public.proformainvoicerow 
        ALTER COLUMN invoice_id TYPE bigint USING invoice_id::bigint;
        
        RAISE NOTICE 'Changed invoice_id column type from numeric to bigint';
    END IF;
    
    -- Check if the foreign key already exists
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.table_constraints 
        WHERE constraint_name = 'fk_proformainvoicerow_invoice_id'
    ) THEN
        -- Add foreign key constraint
        ALTER TABLE public.proformainvoicerow 
        ADD CONSTRAINT fk_proformainvoicerow_invoice_id 
        FOREIGN KEY (invoice_id) REFERENCES public.proformainvoice(id) ON DELETE CASCADE;
        
        RAISE NOTICE 'Added foreign key constraint: fk_proformainvoicerow_invoice_id';
    ELSE
        RAISE NOTICE 'Foreign key constraint fk_proformainvoicerow_invoice_id already exists';
    END IF;
END $$;

-- Add index for better performance
CREATE INDEX IF NOT EXISTS idx_proformainvoicerow_invoice_id 
ON public.proformainvoicerow USING btree (invoice_id);

-- Add a function to get proforma data with rows for a specific lead
CREATE OR REPLACE FUNCTION get_lead_proformas(p_lead_id bigint)
RETURNS TABLE (
    proforma_id bigint,
    cdate date,
    total numeric,
    total_base numeric,
    vat_value numeric,
    notes text,
    sub_total numeric,
    add_vat text,
    currency_id numeric,
    lead_id bigint,
    client_id numeric,
    ppr_id numeric,
    bank_account_id numeric,
    rows jsonb
) 
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT 
        pi.id as proforma_id,
        pi.cdate,
        pi.total,
        pi.total_base,
        pi.vat_value,
        pi.notes,
        pi.sub_total,
        pi.add_vat,
        pi.currency_id,
        pi.lead_id,
        pi.client_id,
        pi.ppr_id,
        pi.bank_account_id,
        COALESCE(
            (
                SELECT jsonb_agg(
                    jsonb_build_object(
                        'id', pir.id,
                        'description', pir.description,
                        'qty', pir.qty,
                        'rate', pir.rate,
                        'total', pir.total
                    )
                )
                FROM proformainvoicerow pir
                WHERE pir.invoice_id = pi.id
            ),
            '[]'::jsonb
        ) as rows
    FROM proformainvoice pi
    WHERE pi.lead_id = p_lead_id
    ORDER BY pi.cdate DESC;
END;
$$;

-- Add a function to create a new proforma with rows
CREATE OR REPLACE FUNCTION create_proforma_with_rows(
    p_lead_id bigint,
    p_total numeric,
    p_total_base numeric,
    p_vat_value numeric DEFAULT 0,
    p_notes text DEFAULT NULL,
    p_sub_total numeric DEFAULT NULL,
    p_add_vat text DEFAULT 'f',
    p_currency_id numeric DEFAULT 1,
    p_client_id numeric DEFAULT NULL,
    p_bank_account_id numeric DEFAULT NULL,
    p_ppr_id numeric DEFAULT NULL,
    p_rows jsonb DEFAULT '[]'::jsonb
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
DECLARE
    v_proforma_id bigint;
    v_row jsonb;
BEGIN
    -- Insert proforma
    INSERT INTO proformainvoice (
        cdate, total, total_base, vat_value, notes, sub_total, 
        add_vat, currency_id, lead_id, client_id, bank_account_id, ppr_id
    ) VALUES (
        current_date, p_total, p_total_base, p_vat_value, p_notes, 
        p_sub_total, p_add_vat, p_currency_id, p_lead_id, p_client_id, p_bank_account_id, p_ppr_id
    ) RETURNING id INTO v_proforma_id;
    
    -- Insert rows
    FOR v_row IN SELECT * FROM jsonb_array_elements(p_rows)
    LOOP
        INSERT INTO proformainvoicerow (
            description, qty, rate, total, invoice_id
        ) VALUES (
            COALESCE(v_row->>'description', ''),
            COALESCE((v_row->>'qty')::numeric, 1),
            COALESCE((v_row->>'rate')::numeric, 0),
            COALESCE((v_row->>'total')::numeric, 0),
            v_proforma_id
        );
    END LOOP;
    
    RETURN v_proforma_id;
END;
$$;

-- Add a view for easier proforma access
CREATE OR REPLACE VIEW proforma_with_rows AS
SELECT 
    pi.id,
    pi.cdate,
    pi.total,
    pi.total_base,
    pi.vat_value,
    pi.notes,
    pi.sub_total,
    pi.add_vat,
    pi.currency_id,
    pi.lead_id,
    pi.client_id,
    pi.ppr_id,
    pi.bank_account_id,
    pi.firm_id,
    ac.name as currency_name,
    ac.iso_code as currency_code,
    ll.manual_id as lead_number,
    ll.name as client_name,
    ll.email as client_email,
    ll.phone as client_phone,
    (
        SELECT jsonb_agg(
            jsonb_build_object(
                'id', pir.id,
                'description', pir.description,
                'qty', pir.qty,
                'rate', pir.rate,
                'total', pir.total,
                'created_at', pir.created_at
            )
        )
        FROM proformainvoicerow pir
        WHERE pir.invoice_id = pi.id
    ) as rows
FROM proformainvoice pi
LEFT JOIN accounting_currencies ac ON pi.currency_id = ac.id
LEFT JOIN leads_lead ll ON pi.lead_id = ll.id;

-- Grant necessary permissions
GRANT SELECT ON proforma_with_rows TO authenticated;
GRANT SELECT ON proformainvoice TO authenticated;
GRANT SELECT ON proformainvoicerow TO authenticated;
GRANT EXECUTE ON FUNCTION get_lead_proformas(bigint) TO authenticated;
GRANT EXECUTE ON FUNCTION create_proforma_with_rows(bigint, numeric, numeric, numeric, text, numeric, text, numeric, numeric, numeric, jsonb) TO authenticated;

-- Add RLS policies for security
ALTER TABLE proformainvoice ENABLE ROW LEVEL SECURITY;
ALTER TABLE proformainvoicerow ENABLE ROW LEVEL SECURITY;

-- RLS policies with existence checks
DO $$
BEGIN
    -- Drop existing policies if they exist for proformainvoice
    DROP POLICY IF EXISTS "Users can view proformas for their leads" ON proformainvoice;
    
    -- Create policy for proformainvoice
    CREATE POLICY "Users can view proformas for their leads" ON proformainvoice
        FOR SELECT USING (
            lead_id IN (
                SELECT id FROM leads_lead WHERE id = proformainvoice.lead_id
            )
        );
        
    RAISE NOTICE 'Created RLS policy for proformainvoice table';
END $$;

DO $$
BEGIN
    -- Drop existing policies if they exist for proformainvoicerow
    DROP POLICY IF EXISTS "Users can view proforma rows for accessible invoices" ON proformainvoicerow;
    
    -- Create policy for proformainvoicerow
    CREATE POLICY "Users can view proforma rows for accessible invoices" ON proformainvoicerow
        FOR SELECT USING (
            invoice_id IN (
                SELECT id FROM proformainvoice WHERE lead_id IN (
                    SELECT id FROM leads_lead WHERE id = proformainvoice.lead_id
                )
            )
        );
        
    RAISE NOTICE 'Created RLS policy for proformainvoicerow table';
END $$;

-- Insert some sample data for testing (optional)
-- You can remove this section if you don't want sample data
DO $$
DECLARE
    v_sample_lead_id bigint;
    v_proforma_id bigint;
    v_existing_proforma_count integer;
BEGIN
    -- Check if there are already proformas for this lead
    SELECT COUNT(*) INTO v_existing_proforma_count FROM proformainvoice;
    
    IF v_existing_proforma_count = 0 THEN
        -- Find a sample legacy lead
        SELECT id INTO v_sample_lead_id FROM leads_lead LIMIT 1;
        
        IF v_sample_lead_id IS NOT NULL THEN
            -- Create a sample proforma
            v_proforma_id := create_proforma_with_rows(
                p_lead_id := v_sample_lead_id,
                p_total := 10000,
                p_total_base := 8474.58,
                p_vat_value := 1525.42,
                p_notes := 'Sample proforma for testing',
                p_sub_total := 8474.58,
                p_add_vat := 't',
                p_currency_id := 1,
                p_client_id := NULL,
                p_bank_account_id := NULL,
                p_ppr_id := NULL,
                p_rows := '[
                    {
                        "description": "Legal Services",
                        "qty": 1,
                        "rate": 8474.58,
                        "total": 8474.58
                    }
                ]'::jsonb
            );
            
            RAISE NOTICE 'Sample proforma created with ID: %', v_proforma_id;
        ELSE
            RAISE NOTICE 'No sample lead found - skipping sample data creation';
        END IF;
    ELSE
        RAISE NOTICE 'Proformas already exist (% existing) - skipping sample data creation', v_existing_proforma_count;
    END IF;
END $$;

-- Final summary
DO $$
BEGIN
    RAISE NOTICE '=== PROFORMA TABLES SETUP COMPLETE ===';
    RAISE NOTICE 'Created/Updated tables: proformainvoice, proformainvoicerow';
    RAISE NOTICE 'Added foreign key: proformainvoicerow.invoice_id -> proformainvoice.id';
    RAISE NOTICE 'Created functions: get_lead_proformas(), create_proforma_with_rows()';
    RAISE NOTICE 'Created view: proforma_with_rows';
    RAISE NOTICE 'Added RLS policies for security';
    RAISE NOTICE 'Ready for use with legacy leads!';
END $$;
